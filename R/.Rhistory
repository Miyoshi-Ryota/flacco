resample(task=makeClassifTask(data=iris, target = "Species"), learner=makeLearner("classif.rpart"), resampling=makeResampleDesc("CV", iters = 1))
resample(task=makeClassifTask(data=iris, target = "Species"), learner=makeLearner("classif.rpart"), resampling=makeResampleDesc("CV", iters = 2))
resample(task=makeClassifTask(data=iris, target = "Species"), learner=makeLearner("classif.rpart"), resampling=makeResampleDesc("CV", iters = 1))
x = seq(-9/10, 9/10, 1/5)
x > 0
x < 0.5
install.packages("checkmate")
install.packages(c("BatchExperiments", "BatchJobs", "BBmisc"))
install.packages(c("e1071", "gplots", "klaR", "knitr", "MASS", "mvtnorm", "party", "randomForest", "roxygen2", "xtable"))
install.packages(c("mice", "plot3D", "pracma", "R2HTML", "rgl"))
X = t(replicate(1000, runif(2, -10, 10)))
f = function(x) sum(x^2)
y = apply(X, 1, f)
init = data.frame(X, y = y)
init.grid = convertInitDesignToGrid(init = init,
lower = -10, upper = 10, blocks = 10)
source('~/Documents/repos/ela/R/cm_computeGridCenters.R')
source('~/Documents/repos/ela/R/cm_convertInitDesignToGrid.R')
init.grid = convertInitDesignToGrid(init = init,
lower = -10, upper = 10, blocks = 10)
centers = computeGridCenters(lower = -10, upper = 10, blocks = c(10, 10))
cell.centers = centers
head(cell.centers)
x = cell.centers[, 1:2]
rbind(x, init.grid[1, 1:2])
colnames(cell.centers) = colnames(init.grid)[-(dims + 1L)]
dims = ncol(init.grid) - 2L
colnames(cell.centers) = colnames(init.grid)[-(dims + 1L)]
x = cell.centers[, 1:2]
rbind(x, init.grid[1, 1:2])
head(init.grid)
init.grid[1, 1:2]
x
x = cell.centers[1, 1:2]
x
init.grid[1, 1:2]
rbind(x, init.grid[1, 1:2])
dist(rbind(x, init.grid[1, 1:2]))
as.numeric(dist(rbind(x, init.grid[1, 1:2])))
sqrt(sum((-9 - 2.43)^2 + (-9 - 5.06)^2))
sqrt(sum((-9 - 2.43)^2 + (-9 + 5.06)^2))
y = init.grid[1, 1:2]
sqrt(sum((x - y)^2))
t(x - y) %*% (x - y)
x - y
crossprod(x - y)
crossprod(as.numeric(x - y))
sqrt(crossprod(as.numeric(x - y)))
sqrt(crossprod(as.numeric(x - y)), drop = TRUE)
sqrt(crossprod(as.numeric(x - y), drop = TRUE))
sqrt(crossprod(as.numeric(x - y)))
as.numeric(sqrt(crossprod(as.numeric(x - y))))
as.numeric(dist(rbind(x, y)))
foo1 = function() {
y = init.grid[1, 1:2]
sqrt(sum((x - y)^2))
}
foo2 = function() {
y = init.grid[1, 1:2]
as.numeric(sqrt(crossprod(as.numeric(x - y))))
}
foo3 = function() {
y = init.grid[1, 1:2]
as.numeric(dist(rbind(x, y)))
}
system.time((a1 = replicate(500, foo1())))
system.time((a1 = replicate(1000, foo1())))
system.time((a1 = replicate(2500, foo1())))
system.time((a2 = replicate(2500, foo2())))
system.time((a2 = replicate(2500, foo2())))
system.time((a3 = replicate(2500, foo3())))
dists = sapply(1:nrow(init.grid), function(j) {
as.numeric(dist(rbind(init.grid[j, 1:dims], x)))
})
dists
which.min
which.min(dists)
selectMin(dists)
source('~/Documents/repos/ela/R/utilities.R')
selectMin(dists)
system.time((a1 = replicate(500, selectMin(dists))))
system.time((a1 = replicate(50000, selectMin(dists))))
system.time((a2 = replicate(50000, which.min(dists))))
init.grid[selectMin(dists), ]
grid.nearest = ddply(cell.centers[, 1:dims], "cell.ID", function(x) {
dists = sapply(1:nrow(init.grid), function(j) {
as.numeric(dist(rbind(init.grid[j, 1:dims], x)))
})
init.grid[selectMin(dists), ]
})
library(plyr)
grid.nearest = ddply(cell.centers[, 1:dims], "cell.ID", function(x) {
dists = sapply(1:nrow(init.grid), function(j) {
as.numeric(dist(rbind(init.grid[j, 1:dims], x)))
})
init.grid[selectMin(dists), ]
})
head(cell.centers)
str(cell.centers)
grid.nearest = ddply(cell.centers, "cell.ID", function(x) {
dists = sapply(1:nrow(init.grid), function(j) {
as.numeric(dist(rbind(init.grid[j, 1:dims], x[1:dims])))
})
init.grid[selectMin(dists), ]
})
bla = dist(rbind(cell.centers[,1:dims], init.grid[, 1:dims]))
head(bla)
bla
n.cells = nrow(cell.centers)
n.obs = nrow(init.grid)
dists = dist(rind(cell.centers[, 1:dims], init.grid[, 1:dims]))
dists = as.matrix(dist(rbind(cell.centers[, 1:dims], init.grid[, 1:dims]),
diag = TRUE, upper = TRUE))
dim(dists)
dists = as.matrix(dist(rbind(cell.centers[, 1:dims], init.grid[, 1:dims]),
diag = TRUE, upper = TRUE))[1:n.cells,]
dim(dists)
dists = as.matrix(dist(rbind(cell.centers[, 1:dims], init.grid[, 1:dims]),
diag = TRUE, upper = TRUE))[1:n.cells,-(1:n.cells)]
dim(dists)
rbind(cell.centers[1:5, 1:dims])
dist(cell.centers[1:5, 1:dims])
as.matrix(dist(cell.centers[1:5, 1:dims]))
as.matrix(dist(cell.centers[1:5, 1:dims])[1:3, ])
dists = as.matrix(dist(rbind(cell.centers[, 1:dims],
init.grid[, 1:dims])), ...)[1:n.cells,-(1:n.cells)]
dists = as.matrix(dist(rbind(cell.centers[, 1:dims],
init.grid[, 1:dims])))[1:n.cells,-(1:n.cells)]
dists
dim(dists)
bla = apply(dists, 1, findMin)
bla = apply(dists, 1, selectMin)
bla
dists[1, c(375, 475, 575)]
dist(rbind(init.grid[475,1:dims], cell.centers[1,1:dims]))
bla
table(bla)
nearest.grid = init.grid[apply(dists, 1, selectMin), ]
head(nearest.grid)
init.grid[475,]
sapply(cell.centers, function(x) length(unique(x)))
sapply(cell.centers[, 1:dims], function(x) length(unique(x)))
blocks = as.integer(sapply(cell.centers[, 1:dims], function(x)
length(unique(x))))
blocks
blocks - 2
prod(blocks - 2)
stopifnot(all(blocks > 2L))
(all(blocks > 2L))
((blocks > 2L))
array(5*6*8, dim = c(5, 6, 8))
array(1:5*6*8, dim = c(5, 6, 8))
array(1:(5*6*8), dim = c(5, 6, 8))
cc = array(1:(5*6*8), dim = c(5, 6, 8))
cc[-c(1,5),,]
cc[2:3,1:6,1:8]
cc[2:4,1:6,1:8]
cc[c(2:4,1:6,1:8)]
?array
gini.md(x) = function(x) {
n = length(x)
i = 1:n
2 * sum((2 * i - n - 1) * sort(x)) / n^2
}
gini.md = function(x) {
n = length(x)
i = 1:n
2 * sum((2 * i - n - 1) * sort(x)) / n^2
}
gini.md = function(x) {
n = length(x)
i = 1:n
2 * sum((2 * i - n - 1) * sort(x)) / n^2
}
gini.md2 = function(x) {
n = length(x)
2 * mean(x) * (sum(seq_along(x) * 2 * sort(x))) / (n^2 * mean(x)) - ((n + 1L) / n)
}
system.time((a = replicate(50, gini.md(x))))
system.time((a = replicate(50, gini.md(iris$Petal.Length))))
system.time((a = replicate(5000, gini.md(iris$Petal.Length))))
system.time((a = replicate(10000, gini.md(iris$Petal.Length))))
system.time((b = replicate(10000, gini.md2(iris$Petal.Length))))
identical(a, b)
gini.md = function(x) {
n = length(x)
i = 1:n
2 * sum((2 * i - n - 1) * sort(x)) / n^2
}
gini.md2 = function(x) {
n = length(x)
a = 2 * seq_along(x) * sort(x)
b = n^2 * mean(x)
d = (n + 1) / n
2 * mean(x) * (sum(a) / b - d)
}
gini.md2(iris$Sepal.Length)
gini.md(iris$Sepal.Length)
system.time((a = replicate(10000, gini.md(iris$Petal.Length))))
system.time((b = replicate(10000, gini.md2(iris$Petal.Length))))
identical(a, b)
max(abs(a - b))
gini.md = function(x) {
n = length(x)
i = seq_along(x)
2 * sum((2 * i - n - 1) * sort(x)) / n^2
}
gini.md2 = function(x) {
n = length(x)
a = 2 * seq_along(x) * sort(x)
b = n^2 * mean(x)
d = (n + 1) / n
2 * mean(x) * (sum(a) / b - d)
}
system.time((a = replicate(10000, gini.md(iris$Petal.Length))))
system.time((b = replicate(10000, gini.md2(iris$Petal.Length))))
identical(a, b)
gini.md = function(x) {
n = length(x)
2 * sum((2 * seq_along(x) - n - 1) * sort(x)) / n^2
}
system.time((a = replicate(10000, gini.md(iris$Petal.Length))))
gini.md3 = function(x) {
n = length(x)
res = 0
for(i in 1:n) {
res = res + sum(abs(x[i] - x))
}
res
}
gini.md4 = function(x) {
n = length(x)
res = sapply(x, function(i) sum(abs(i - x))
sum(res)
}
gini.md3 = function(x) {
n = length(x)
res = 0
for(i in 1:n) {
res = res + sum(abs(x[i] - x))
}
res
}
gini.md4 = function(x) {
n = length(x)
res = sapply(x, function(i) sum(abs(i - x)))
sum(res)
}
system.time((a1 = replicate(10000, gini.md(iris$Petal.Length))))
system.time((a2 = replicate(10000, gini.md2(iris$Petal.Length))))
system.time((a3 = replicate(10000, gini.md3(iris$Petal.Length))))
system.time((a4 = replicate(10000, gini.md4(iris$Petal.Length))))
gini.md3 = function(x) {
n = length(x)
res = 0
for(i in 1:n) {
res = res + sum(abs(x[i] - x))
}
res / (n^2)
}
gini.md4 = function(x) {
n = length(x)
res = sapply(x, function(i) sum(abs(i - x)))
sum(res) / (n^2)
}
system.time((a3 = replicate(10000, gini.md3(iris$Petal.Length))))
system.time((a4 = replicate(10000, gini.md4(iris$Petal.Length))))
identical(a1)
identical(a1, a2)
identical(a1, a3)
identical(a1, a4)
identical(a2, a4)
cc
cell.cube
cell.cube = array(1:prod(blocks), dim = blocks)
blocks = c(6, 10, 5)
cell.cube = array(1:prod(blocks), dim = blocks)
cell.cube
cell.cube[list(2:5, 1:10, 1:5)]
cell.cube[dim = list(2:5, 1:10, 1:5)]
data(cars)
head(cars)
require(AID)
require(AID)
sapply(colnames(cars), function(x) {
lambda = boxcoxnc(as.numeric(cars[[x]]), method = "sw", plotit = FALSE,
lambda = seq(-4, 4, 0.01))$result[[1]]
tr = (cars[[x]]^lambda - 1) / lambda
hist(tr, main = x, xlab = sprintf("%.2f", shapiro.test(tr)$p.value),
col = "cyan", ylab = "")
})
?boxcoxnc
require(AID)
sapply(colnames(cars), function(x) {
lambda = boxcoxnc(as.numeric(cars[[x]]), method = "sw", plotit = FALSE,
lam = seq(-4, 4, 0.01))$result[[1]]
tr = (cars[[x]]^lambda - 1) / lambda
hist(tr, main = x, xlab = sprintf("%.2f", shapiro.test(tr)$p.value),
col = "cyan", ylab = "")
})
require(AID)
matrix(1:4, ncol = 2, nrow = 2)
sapply(colnames(cars), function(x) {
lambda = boxcoxnc(as.numeric(cars[[x]]), method = "sw", plotit = FALSE,
lam = seq(-4, 4, 0.01))$result[[1]]
tr = (cars[[x]]^lambda - 1) / lambda
hist(tr, main = x, xlab = sprintf("%.2f", shapiro.test(tr)$p.value),
col = "cyan", ylab = "")
})
require(AID)
layout(matrix(1:4, ncol = 2, nrow = 2))
sapply(colnames(cars), function(x) {
lambda = boxcoxnc(as.numeric(cars[[x]]), method = "sw", plotit = FALSE,
lam = seq(-4, 4, 0.01))$result[[1]]
tr = (cars[[x]]^lambda - 1) / lambda
hist(tr, main = x, xlab = sprintf("%.2f", shapiro.test(tr)$p.value),
col = "cyan", ylab = "")
})
require(AID)
layout(matrix(1:4, ncol = 2, nrow = 2))
sapply(colnames(cars), function(x) {
hist(cars[[x]], main = x, xlab = sprintf("%.2f", shapiro.test(cars[[x]])$p.value),
col = "cyan", ylab = "")
})
sapply(colnames(cars), function(x) {
lambda = boxcoxnc(as.numeric(cars[[x]]), method = "sw", plotit = FALSE,
lam = seq(-4, 4, 0.01))$result[[1]]
tr = (cars[[x]]^lambda - 1) / lambda
hist(tr, main = x, xlab = sprintf("%.2f", shapiro.test(tr)$p.value),
col = "cyan", ylab = "")
})
require(AID)
layout(matrix(1:4, ncol = 2, nrow = 2))
sapply(colnames(cars), function(x) {
hist(cars[[x]], main = x, xlab = sprintf("%.2f", shapiro.test(cars[[x]])$p.value),
col = "cyan", ylab = "")
})
sapply(colnames(cars), function(x) {
lambda = boxcoxnc(as.numeric(cars[[x]]), method = "sw", plotit = FALSE,
lam = seq(-4, 4, 0.01))$result[[1]]
tr = (cars[[x]]^lambda - 1) / lambda
hist(tr, main = sprintf("%s/n(transformed)", x),
xlab = sprintf("%.2f", shapiro.test(tr)$p.value),
col = "cyan", ylab = "")
})
require(AID)
layout(matrix(1:4, ncol = 2, nrow = 2))
sapply(colnames(cars), function(x) {
hist(cars[[x]], main = x, xlab = sprintf("%.2f", shapiro.test(cars[[x]])$p.value),
col = "cyan", ylab = "")
})
sapply(colnames(cars), function(x) {
lambda = boxcoxnc(as.numeric(cars[[x]]), method = "sw", plotit = FALSE,
lam = seq(-4, 4, 0.01))$result[[1]]
tr = (cars[[x]]^lambda - 1) / lambda
hist(tr, main = sprintf("%s\n(transformed)", x),
xlab = sprintf("%.2f", shapiro.test(tr)$p.value),
col = "cyan", ylab = "")
})
dev.off()
dev.off()
rm(list = ls())
x1 = c(5, 2, 0, -3, -4)
x2 = c(-1, -2, 6, -3, 0)
X = cbind(x1, x2)
cov(X)
X
X[1,] %*% X[,1]
t(X[1,]) %*% X[1,]
X[1,] %*% t(X[1,])
X[1,] %*% t(X[1,]) + X[2,] %*% t(X[2,]) + X[3,] %*% t(X[3,]) + X[4,] %*% t(X[4,]) + X[5,] %*% t(X[5,])
(X[1,] %*% t(X[1,]) + X[2,] %*% t(X[2,]) + X[3,] %*% t(X[3,]) + X[4,] %*% t(X[4,]) + X[5,] %*% t(X[5,])) / 2
cov(X)
(X[1,] %*% t(X[1,]) + X[2,] %*% t(X[2,]) + X[3,] %*% t(X[3,]) + X[4,] %*% t(X[4,]) + X[5,] %*% t(X[5,])) / 4
sapply(iris[,-5], qqplot)
sapply(iris[,-5], qqnorm)
par(mfrow = c(1, 1))
sapply(iris[,-5], qqnorm)
par(mfrow = c(2, 2))
sapply(iris[,-5], qqnorm)
sapply(colnames(iris)[-5], function(x) qqnorm(iris[[x]], main = sprintf("QQ-Plot\n%s", x)))
sapply(colnames(iris)[-5], function(x) qqnorm(iris[[x]], main = sprintf("QQ-Plot\n(%s)", x)))
shapiro.test(iris[,1])
shapiro.test(iris[,1])$p.value
str(shapiro.test(iris[,1]))
shapiro.test(iris[,1])[1:2]
unlist(shapiro.test(iris[,1])[1:2])
sapply(iris[,-5], function(x) unlist(shapiro.test(x)[c("statistic.W", "p.value")]))
sapply(iris[,-5], function(x) (shapiro.test(x)[c("statistic.W", "p.value")]))
shapiro.test(iris[,1])[1:2]
sapply(iris[,-5], function(x) unlist(shapiro.test(x)[c("statistic", "p.value")]))
t(sapply(iris[,-5], function(x) unlist(shapiro.test(x)[c("statistic", "p.value")])))
require(AID)
boxcoxnc(iris$Sepal.Length, method="sw", lam=seq(-4, 4, 0.01))
boxcoxnc(iris$Sepal.Length, method="sw", lam=seq(-4, 4, 0.01), plotit = FALSE)
boxcoxnc(iris$Sepal.Length, method="sw", lam=seq(-4, 4, 0.01), plotit = FALSE)$reult
str(boxcoxnc(iris$Sepal.Length, method="sw", lam=seq(-4, 4, 0.01), plotit = FALSE))
boxcoxnc(iris$Sepal.Length, method="sw", lam=seq(-4, 4, 0.01), plotit = FALSE)$result
boxcoxnc(iris$Sepal.Length, method="sw", lam=seq(-4, 4, 0.01), plotit = FALSE)$result$lambda.hat
boxcoxnc(iris$Sepal.Length, method="sw", lam=seq(-4, 4, 0.01), plotit = FALSE)$result[1]
x = "Sepal.Length"
obs = iris[[x]]
lambda = boxcoxnc(obs, method="sw", lam=seq(-4, 4, 0.01), plotit = FALSE)$result[1]
tr = (obs^lambda - 1) / lambda
shapiro = shapiro.test(x)
sprintf("p-val: %.4f", shapiro.test(iris$Petal.Length)$p.value)
sprintf("p-val: %g", shapiro.test(iris$Petal.Length)$p.value)
sprintf("p-val: %.2g", shapiro.test(iris$Petal.Length)$p.value)
sprintf("p-val: %.3g", shapiro.test(iris$Petal.Length)$p.value)
sprintf("p-val: %.3G", shapiro.test(iris$Petal.Length)$p.value)
sprintf("p-val: %.3g", shapiro.test(iris$Petal.Length)$p.value)
pval.obs = sapply(iris[, -5], function(x) shapiro.test$p.value)
pval.obs = sapply(iris[, -5], function(x) shapiro.test$p.value(x))
pval.obs = sapply(iris[, -5], function(x) shapiro.test$p.value(x))
pval.obs = sapply(iris[, -5], function(x) shapiro.test(x)$p.value
)
pval.obs
pval.tr = sapply(iris[, -5], function(x) {
lambda = boxcoxnc(x, method = "sw", lam=seq(-4, 4, 0.01), plotit = FALSE)$result[1]
tr = (x^lambda - 1) / lambda
shapiro.test(tr)$p.value
})
pval.tr
cbind(pval.obs, rejectH0.obs = pval.obs < 0.05)
data.frame(pval.obs, rejectH0.obs = pval.obs < 0.05)
data.frame(pval.obs, rejectH0.obs = pval.obs < 0.05, pval.tr, rejectH0.tr = pval.tr < 0.05)
data.frame(pval.obs, rejectH0.obs = pval.obs < 0.05, pval.tr, rejectH0.tr = pval.tr < 0.05)
x1 = iris$Sepal.Length
x2 = iris$Petal.Width
??contour
contourplot(Sepal.Length ~ Petal.Width)
library(lattice)
contourplot(Sepal.Length ~ Petal.Width)
contourplot(Sepal.Length ~ Petal.Width, data = iris)
contourplot(Sepal.Length ~ Petal.Width | Species, data = iris)
ggplot(iris, aes(x = Petal.Length, y = Sepal.Width)) + geom_density2d()
library(ggplot2)
ggplot(iris, aes(x = Petal.Length, y = Sepal.Width)) + geom_density2d()
?ggplot
?theme
ggplot(iris, aes(x = Petal.Length, y = Sepal.Width)) + geom_density2d() +
theme(plot.title = element_text("blubb"))
ggplot(iris, aes(x = Petal.Length, y = Sepal.Width, label = "blubb")) + geom_density2d()
ggplot(iris, aes(x = Petal.Length, y = Sepal.Width)) + geom_density2d() + labs(title = "Original Data")
x = iris$Sepal.Length
x = sort(x)
n = length(x)
z = ((1:n) - 0.5) / n
th.quants = qpois(z, lambda = 1)
plot (x = th.quants, y = x,
xlab = "Theor. Quantiles of Poi(1)",
ylab = "Sample Quantiles")
abline(lm(x ~ th.quants), col = "red")
qqline(x)
?abline
quantile(c(0.25, 0.75), x)
quantile(x, c(0.25, 0.75))
emp.q = quantile(x, c(0.25, 0.75))
the.q = quantile(th.quants, c(0.25, 0.75))
emp.q
the.q
abline(lm(emp.q ~ the.q), col = "red")
x = sort(x)
n = length(x)
z = ((1:n) - 0.5) / n
th.quants = qpois(z, lambda = 1)
plot (x = th.quants, y = x,
xlab = "Theor. Quantiles of Poi(1)",
ylab = "Sample Quantiles")
emp.q = quantile(x, c(0.25, 0.75))
the.q = quantile(th.quants, c(0.25, 0.75))
abline(lm(emp.q ~ the.q), col = "red")
?qqplot
qqplot(th.quants, x)
qqline(th.quants, x)
?qqline
qqline(x, distribution = qexp, lambda = 5)
qqline(th.quants, dist = qpois(., lambda = 5))
qqline(th.quants, dist = qpois(., lambda = 5))
qqline(th.quants, dist = function(x) qpois(x, lambda = 5))
qqline(th.quants, dist = function(a) qpois(a, lambda = 5), col = "red")
qqplot(th.quants, x)
qqplot(th.quants, x)
qqline(th.quants, dist = function(a) qpois(a, lambda = 5), col = "red")
qqline(th.quants, dist = function(a) qpois(a, lambda = 1/5), col = "red")
qqline(th.quants, dist = qpois(., lambda = 1/5), col = "red")
?qpois
qqline(th.quants, dist = qpois(., lambda = 5), col = "red")
qqline(th.quants, dist = qpois(p, lambda = 5), col = "red")
qqline(th.quants, distribution = function(p) qpois(p, lambda = 5), col = "red")
qqplot(th.quants, x, xlim = c(-10, 20))
qqplot(th.quants, x, xlim = c(-10, 20), ylim = c(-10, 20))
qqline(th.quants, distribution = function(p) qpois(p, lambda = 5), col = "red")
qqline(x, distribution = function(p) qpois(p, lambda = 5), col = "red")
qqplot(qpois(ppoints(length(x)), lambda = 5), x)
qqline(x, distribution = function(p) qpois(p, lambda = 5), col = "red")
qqplot(th.quants, x, xlim = c(-10, 20), ylim = c(-10, 20))
qqplot(th.quants, x)
qqline(x, distribution = function(p) qpois(p, lambda = 1), col = "red")
qqline(x, distribution = qpois, col = "blue")
dev.off()
dev.off()
setwd("~/Documents/repos/ela/R")
library(devtools)
load_all("..")
??assertDataFrame
?assertDataFrame
?makeClassifTask
library(checkMate)
library(checkmate)
assertDataFrame
?assertDataFrame
