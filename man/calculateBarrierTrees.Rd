% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/gcm_feature_barrierTrees.R
\name{calculateBarrierTrees}
\alias{calculateBarrierTrees}
\title{Calculate GCM features for a given function}
\usage{
calculateBarrierTrees(feat.object, control = list())
}
\arguments{
\item{feat.object}{[\code{\link{FeatureObject}}]\cr
A feature object as created by \code{\link{createFeatureObject}}.
Note that the object needs to contain the number of blocks per dimension
(parameter \code{blocks}) in order to allow cellmapping features to compute.}

\item{control}{[\code{\link{list}}]\cr
A list object that stores additional configuration parameters.
The following parameter is used here:
[\code{barrierTree.plot}] is a boolean, indicating whether barrier trees are visualised in a plot [experimental].}
}
\value{
[\code{\link{list}(30)} of \code{\link{numeric}(1)}].\cr
  List of features.\cr
  For further information, see details.
}
\description{
Based on Generalized Cell Mapping (GCM) techniques, Barrier Trees of the landscape
are created from cell mappings. Thirty features are calculated from these Barrier Trees.

Provided the decision space is divided into a grid of cells, GCM incorporates
the dynamics of a system into the cell mapping. For each cell, the probabilities of transitioning
to successor cells are calculated, where each cell can have multiple successor cells.

Computation is performed based on \code{min}, \code{mean}, and \code{near} approaches for
finding a representative objective function value for each cell.
}
\details{
For each GCM approach, i.e. \code{min}, \code{mean}, and \code{near}, ten features are computed:\cr
  \code{barrierTree.{min, mean, near}$levels}: Levels of the barrier tree,\cr
  \code{barrierTree.{min, mean, near}$depth}: Distance from root of the barrier tree to the node with the minimum value,\cr
  \code{barrierTree.{min, mean, near}$ratioDepthLevels}: Ratio depth/levels,\cr
  \code{barrierTree.{min, mean, near}$ratioLevelsLeaves}: Ratio levels/leaves (where leaves is the number of leaf nodes of the tree),\cr
  \code{barrierTree.{min, mean, near}${min, mean, max, mean, std}w}: Aggregations of weights, i.e. distances between tree nodes,\cr
  \code{barrierTree.{min, mean, near}${min, mean, max, mean, std}Distance}: Aggregations of distances between global and local optima,\cr
  \code{barrierTree.{min, mean, near}$bratio{Uncertain, Certain, Max}}: Ratio of maximum and minimum of {uncertain, certain, and maximum}\cr basins,
  \code{barrierTree.{min, mean, near}${min, mean, max, mean, std}BasinIntersectionCount}: Aggregations of numbers of intersections, intersecting global and local basins,\cr
  \code{barrierTree.{min, mean, near}$range}: Range of basins.
}
\examples{
# (1) create the initial design:
X = t(replicate(5000, runif(2, -1000, 1000)))
y = apply(X, 1, function(x) {x[1]^4 + 1000*(x[1]-3)^3 + 1000*x[1] + x[2]})
feat.object = createFeatureObject(X = X, y = y,
  lower = -1000, upper = 1000, blocks = 10)
# (2) compute the GCM-based Barrier Tree features:
calculateBarrierTrees(feat.object = feat.object, control = list(barrierTree.plot=TRUE))
}
\references{
For the underlying concept of GCM refer to Kerschke et al. (2014),
 \dQuote{Cell Mapping Techniques for Exploratory Landscape Analysis},
 in EVOLVE-A Bridge between Probability, Set Oriented Numerics, and Evolutionary Computation V,
 pp. 115-131 (\url{http://dx.doi.org/10.1007/978-3-319-07494-8_9}).
}

