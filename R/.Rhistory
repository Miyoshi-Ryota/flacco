max(abs(m2 - m3))
pt=proc.time()
m1<-A%hoch1%100
proc.time()-pt
pt=proc.time()
m2<-A%hoch%100
proc.time()-pt
pt=proc.time()
m3<-A%^%100
proc.time()-pt
A
m1
m2
m3
m1 == m2
max(abs(m1 - m2))
max(abs(m1 - m3))
max(abs(m2 - m3))
max(abs(m1 - m3))
## Illustration des Geschwindigkeitsvorteils von matpower
A = matrix(rnorm(25), 5, 5)
pt=proc.time()
m1<-A%hoch1%100
proc.time()-pt
pt=proc.time()
m2<-A%hoch%100
proc.time()-pt
pt=proc.time()
m3<-A%^%100
proc.time()-pt
max(abs(m1 - m3))
max(abs(m1 - m2))
max(abs(m3 - m2))
m1
pt=proc.time()
m1<-A%hoch1%50
proc.time()-pt
pt=proc.time()
m2<-A%hoch%50
proc.time()-pt
pt=proc.time()
m3<-A%^%50
proc.time()-pt
m1
m2
m3
max(abs(m1 - m2))
max(abs(m1 - m3))
max(abs(m2 - m3))
A
pt=proc.time()
m1<-A%hoch1%10
proc.time()-pt
pt=proc.time()
m2<-A%hoch%10
proc.time()-pt
pt=proc.time()
m3<-A%^%10
proc.time()-pt
max(abs(m1 - m2))
max(abs(m1 - m3))
max(abs(m2 - m3))
all.equal(m1, m2)
all.equal(m1, m3)
pt=proc.time()
m1<-A%hoch1%20
proc.time()-pt
pt=proc.time()
m2<-A%hoch%20
proc.time()-pt
pt=proc.time()
m3<-A%^%20
proc.time()-pt
max(abs(m1 - m2))
max(abs(m1 - m3))
max(abs(m2 - m3))
all.equal(m1, m2)
all.equal(m1, m3)
all.equal(m2, m3)
A = matrix(rnorm(25), 5, 5)
pot = 40
pt=proc.time()
m1<-A%hoch1%pot
proc.time()-pt
pt=proc.time()
m2<-A%hoch%pot
proc.time()-pt
pt=proc.time()
m3<-A%^%pot
proc.time()-pt
max(abs(m1 - m2))
max(abs(m1 - m3))
max(abs(m2 - m3))
all.equal(m1, m2)
all.equal(m1, m3)
all.equal(m2, m3)
pot = 100
pt=proc.time()
m1<-A%hoch1%pot
proc.time()-pt
pt=proc.time()
m2<-A%hoch%pot
proc.time()-pt
pt=proc.time()
m3<-A%^%pot
proc.time()-pt
max(abs(m1 - m2))
max(abs(m1 - m3))
max(abs(m2 - m3))
all.equal(m1, m2)
all.equal(m1, m3)
all.equal(m2, m3)
?all.equal
A = matrix(rnorm(25*25), 25, 25)
pot = 100
pt=proc.time()
m1<-A%hoch1%pot
proc.time()-pt
pt=proc.time()
m2<-A%hoch%pot
proc.time()-pt
pt=proc.time()
m3<-A%^%pot
proc.time()-pt
max(abs(m1 - m2))
max(abs(m1 - m3))
max(abs(m2 - m3))
all.equal(m1, m2)
all.equal(m1, m3)
all.equal(m2, m3)
pot = 500
pt=proc.time()
m1<-A%hoch1%pot
proc.time()-pt
pt=proc.time()
m2<-A%hoch%pot
proc.time()-pt
pt=proc.time()
m3<-A%^%pot
proc.time()-pt
max(abs(m1 - m2))
max(abs(m1 - m3))
max(abs(m2 - m3))
all.equal(m1, m2)
all.equal(m1, m3)
all.equal(m2, m3)
A = matrix(rnorm(250*250), 250, 250)
pot = 100
pt=proc.time()
m1<-A%hoch1%pot
proc.time()-pt
pt=proc.time()
m2<-A%hoch%pot
proc.time()-pt
pt=proc.time()
m3<-A%^%pot
proc.time()-pt
max(abs(m1 - m2))
max(abs(m1 - m3))
max(abs(m2 - m3))
all.equal(m1, m2)
all.equal(m1, m3)
all.equal(m2, m3)
pot = 200
pt=proc.time()
m1<-A%hoch1%pot
proc.time()-pt
pt=proc.time()
m2<-A%hoch%pot
proc.time()-pt
pt=proc.time()
m3<-A%^%pot
proc.time()-pt
max(abs(m1 - m2))
max(abs(m1 - m3))
max(abs(m2 - m3))
all.equal(m1, m2)
all.equal(m1, m3)
all.equal(m2, m3)
A = matrix(rnorm(250*250), 250, 250) / 10
pot = 300
pt=proc.time()
m1<-A%hoch1%pot
proc.time()-pt
pt=proc.time()
m2<-A%hoch%pot
proc.time()-pt
pt=proc.time()
m3<-A%^%pot
proc.time()-pt
max(abs(m1 - m2))
max(abs(m1 - m3))
max(abs(m2 - m3))
all.equal(m1, m2)
all.equal(m1, m3)
all.equal(m2, m3)
A = matrix(rnorm(250*250), 250, 250) / 100
pot = 500
pt=proc.time()
m1<-A%hoch1%pot
proc.time()-pt
# pt=proc.time()
# m2<-A%hoch%pot
# proc.time()-pt
pt=proc.time()
m3<-A%^%pot
proc.time()-pt
# max(abs(m1 - m2))
max(abs(m1 - m3))
# max(abs(m2 - m3))
# all.equal(m1, m2)
all.equal(m1, m3)
# all.equal(m2, m3)
max(abs(m1))
max(abs(m2))
max(abs(m3))
A = matrix(rnorm(250*250), 250, 250) / 10
pot = 500
pt=proc.time()
m1<-A%hoch1%pot
proc.time()-pt
# pt=proc.time()
# m2<-A%hoch%pot
# proc.time()-pt
pt=proc.time()
m3<-A%^%pot
proc.time()-pt
# max(abs(m1 - m2))
max(abs(m1 - m3))
# max(abs(m2 - m3))
# all.equal(m1, m2)
all.equal(m1, m3)
max(abs(m1))
max(abs(m2))
A = matrix(rnorm(250*250), 250, 250) / 10
pot = 50
pt=proc.time()
m1<-A%hoch1%pot
proc.time()-pt
# pt=proc.time()
# m2<-A%hoch%pot
# proc.time()-pt
pt=proc.time()
m3<-A%^%pot
proc.time()-pt
# max(abs(m1 - m2))
max(abs(m1 - m3))
# max(abs(m2 - m3))
# all.equal(m1, m2)
all.equal(m1, m3)
A%^%(-1.4)
A%^%(1.4)
assertthat::is.count(2)
assertthat::is.count(2.1)
assertthat::is.count(-1)
assertthat::is.count(0)
assertthat::is.count(0.1)
assertthat::is.count(1)
assert_count(0.1)
assert_count(0)
assert_count(1)
assert_count(-1)
A
A%^%0
dim(A)
str(A)
x = 0
dim(x) = c(10, 2)
x = rep(0, 20)
dim(x) = c(10, 2)
x
dim(A)
A
M
M = matrix(sample(1:9, size = 9, replace = TRUE), 3, 3)
M
M %hochbin% 1
M %hochbin% 0
M %hoch1% 1
M %hoch1% 2
# helper functions to compute the power of a matrix efficiently (without expm::%^%)
"%matrixPower%" = function(A, k){ #wenn n eine Zweierpotenz ist, kann A^n durch sukzessives  Quadrieren berechnet werden
assert_count(k)
squareMatrix = function(A) {
return(A %*% A)
}
"%matBinPower%" = function(A, k) {
if (k <= 1) {
if (k == 1) {
return(squareMatrix(A))
} else {
A
}
} else {
return(squareMatrix(A %matBinPower% (k - 1L)))
}
}
"%matPower%" <- function(A, k) {
if (k == 0) {
res = rep(0, prod(dim(A)))
dim(res) = dim(A)
return(res)
} else {
k.binary = floor(log2(k)) # largest power of 2, which is smaller than k
k.rest = k - 2L^k.binary  # remainder between k and k.binary
return((A %matBinPower% k.binary) %*% (A %matPower% k.rest))
}
}
return(A %matPower% k)
}
A = matrix(rnorm(250*250), 250, 250) / 10
pot = 50
pt=proc.time()
m1<-A%hoch1%pot
proc.time()-pt
# pt=proc.time()
# m2<-A%hoch%pot
# proc.time()-pt
pt=proc.time()
m3<-A%^%pot
proc.time()-pt
pt=proc.time()
m4 = A %matrixPower% pot
proc.time()-pt
max(abs(m1 - m4))
max(abs(m1 - m3))
max(abs(m4 - m3))
all.equal(m1, m4)
all.equal(m1, m3)
all.equal(m4, m3)
m4
m1
m2
m3
m1
m4
matrix(1:9, 3, 3) %matrixPower% 3
A = matrix(1:9, 3, 3)
k = 3
assert_count(k)
squareMatrix = function(A) {
return(A %*% A)
}
"%matBinPower%" = function(A, k) {
if (k <= 1) {
if (k == 1) {
return(squareMatrix(A))
} else {
A
}
} else {
return(squareMatrix(A %matBinPower% (k - 1L)))
}
}
"%matPower%" <- function(A, k) {
if (k == 0) {
res = rep(0, prod(dim(A)))
dim(res) = dim(A)
return(res)
} else {
k.binary = floor(log2(k)) # largest power of 2, which is smaller than k
k.rest = k - 2L^k.binary  # remainder between k and k.binary
return((A %matBinPower% k.binary) %*% (A %matPower% k.rest))
}
}
A %matPower% k
(k == 0)
k.binary = floor(log2(k)) # largest power of 2, which is smaller than k
k.rest = k - 2L^k.binary  # remainder between k and k.binary
k.binary
k.rest
(A %matPower% k.rest)
(A %matBinPower% k.binary)
k.res
k.rest
EMatrix(dim(A)[1])
"%matPower%" <- function(A, k) {
if (k == 0) {
res = rep(0L, prod(dim(A)))
dim(res) = dim(A)
diag(res) = 1L
return(res)
} else {
k.binary = floor(log2(k)) # largest power of 2, which is smaller than k
k.rest = k - 2L^k.binary  # remainder between k and k.binary
return((A %matBinPower% k.binary) %*% (A %matPower% k.rest))
}
}
A %matPower% k
A %hoch1% k
A %Â°% k
A %^% k
# helper functions to compute the power of a matrix efficiently (without expm::%^%)
"%matrixPower%" = function(A, k){ #wenn n eine Zweierpotenz ist, kann A^n durch sukzessives  Quadrieren berechnet werden
assert_count(k)
if (k == 0) {
res = rep(0, prod(dim(A)))
dim(res) = dim(A)
return(res)
}
squareMatrix = function(A) {
return(A %*% A)
}
"%matBinPower%" = function(A, k) {
if (k <= 1) {
if (k == 1) {
return(squareMatrix(A))
} else {
A
}
} else {
return(squareMatrix(A %matBinPower% (k - 1L)))
}
}
"%matPower%" <- function(A, k) {
if (k == 0) {
res = rep(0L, prod(dim(A)))
dim(res) = dim(A)
diag(res) = 1L
return(res)
} else {
k.binary = floor(log2(k)) # largest power of 2, which is smaller than k
k.rest = k - 2L^k.binary  # remainder between k and k.binary
return((A %matBinPower% k.binary) %*% (A %matPower% k.rest))
}
}
return(A %matPower% k)
}
A = matrix(rnorm(250*250), 250, 250) / 10
pot = 50
pt=proc.time()
m1<-A%hoch1%pot
proc.time()-pt
# pt=proc.time()
# m2<-A%hoch%pot
# proc.time()-pt
pt=proc.time()
m3<-A%^%pot
proc.time()-pt
pt=proc.time()
m4 = A %matrixPower% pot
proc.time()-pt
max(abs(m1 - m4))
max(abs(m1 - m3))
max(abs(m4 - m3))
all.equal(m1, m4)
all.equal(m1, m3)
all.equal(m4, m3)
pt=proc.time()
m1<-A%hoch1%pot
proc.time()-pt
# pt=proc.time()
# m2<-A%hoch%pot
# proc.time()-pt
pt=proc.time()
m3<-A%^%pot
proc.time()-pt
pt=proc.time()
m4 = A %matrixPower% pot
proc.time()-pt
pt=proc.time()
m1<-A%hoch1%pot
proc.time()-pt
# pt=proc.time()
# m2<-A%hoch%pot
# proc.time()-pt
pt=proc.time()
m3<-A%^%pot
proc.time()-pt
pt=proc.time()
m4 = A %matrixPower% pot
proc.time()-pt
pt=proc.time()
m1<-A%hoch1%pot
proc.time()-pt
# pt=proc.time()
# m2<-A%hoch%pot
# proc.time()-pt
pt=proc.time()
m3<-A%^%pot
proc.time()-pt
pt=proc.time()
m4 = A %matrixPower% pot
proc.time()-pt
pt=proc.time()
m1<-A%hoch1%pot
proc.time()-pt
# pt=proc.time()
# m2<-A%hoch%pot
# proc.time()-pt
pt=proc.time()
m3<-A%^%pot
proc.time()-pt
pt=proc.time()
m4 = A %matrixPower% pot
proc.time()-pt
pt=proc.time()
m1<-A%hoch1%pot
proc.time()-pt
# pt=proc.time()
# m2<-A%hoch%pot
# proc.time()-pt
pt=proc.time()
m3<-A%^%pot
proc.time()-pt
pt=proc.time()
m4 = A %matrixPower% pot
proc.time()-pt
runApp('~/Documents/research/pkgs/flacco/inst/flaccogui')
choose(3 + 2 -1, 2 - 1)
choose(3 + 3 -1, 3 - 1)
1.5 * 1.4
