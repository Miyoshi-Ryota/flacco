% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/ic_feature_information_content.R
\name{calculateInformationContent}
\alias{calculateInformationContent}
\title{Calculate information content-based features for a given function}
\usage{
calculateInformationContent(feat.object, control = list())
}
\arguments{
\item{feat.object}{[\code{\link{FeatureObject}}]\cr
A feature object as created by \code{\link{createFeatureObject}}.
Note that the object needs to contain the number of blocks per dimension
(parameter \code{blocks}) in order to allow cellmapping features to compute.}

\item{control}{[\code{\link{list}}]\cr
  A list object that stores additional configuration parameters. Here, the
  following parameters are used:\cr
  \code{ic.epsilon}: List of epsilon values to be used. Needs to contain \code{epsilon[1] = 0}.\cr
  \code{ic.sorting}: Either "R" for random sorting or "NN" for nearest neighbour sorting. Defaults to "NN".\cr
  \code{ic.calculate_partial}: Boolean value whether to calculate partial information measures.\cr
  \code{ic.generate_sample}: Boolean value whether this function should generate its own sample data using a latin hypercube design strategy. If set to \code{TRUE}, the following three parameters apply.\cr
  \code{ic.generate_sample.dimensions}: Number of feature dimensions.\cr
  \code{ic.generate_sample.min}: Lower bound for sampled values.\cr
  \code{ic.generate_sample.max}: Upper bound for sampled values.\cr
  \code{ic.plot}: Boolean flag whether the measures and values of H and M should be plotted.

  Note that for the sampling parameters \code{ic.generate_sample.min} and
  \code{ic.generate_sample.max} passing vectors  is not supported, since this
  will yield unexpected results. If different min/max values per dimension are required,
  please calculate the data sample yourself before invoking this function.}
}
\value{
[\code{\link{list}(4)} of \code{\link{numeric}(1)}].
  List of features.\cr
  For further information, see details.
}
\description{
Computes features based on the Information Content of Fitness
Sequences (ICoFiS) approach.

In this approach, the information content of a
continuous landscapes, i.e. smoothness, ruggedness, or neutrality, are
quantified. While common analysis methods were able to calculate the information
content of discrete landscapes, the ICoFiS approach provides an adaptation to
continuous landscapes that accounts e.g. for variable step sizes in random walk
sampling.
}
\details{
The first feature, \code{ic.Hmax}, describes the maximum information content
  (entropy) of the fitness sequence. The second, \code{ic.epsilonS} (\dQuote{settling
  sensitivity}), indicates that epsilon for which the sequence nearly consists
  of zeros only.
  The two remaining features are only computed if the control parameter
  \code{ic.calculate_partial} is set to TRUE:
  \code{ic.Mzero} describes the maximum number of inflection points,
  which are reduced to half using an epsilon of \code{ic.epsilon05}.
}
\examples{
# (1) create the initial design:
X = t(replicate(1000, runif(2, -10, 10)))
y = apply(X, 1, function(x) sum(x^2))
feat.object = createFeatureObject(X = X, y = y)
# (2) compute the ICoFiS features:
calculateInformationContent(feat.object = feat.object)
}
\references{
See Munoz et al. (2015), \dQuote{Exploratory Landscape Analysis of Continuous Space
Optimization Problems Using Information Content}, in IEEE Transactions
on Evolutionary Computation (19:1), pp. 74-87, (\url{http://dx.doi.org/10.1109/TEVC.2014.2302006}).
}

