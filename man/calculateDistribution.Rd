% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/ela_feature_y_distribution.R
\name{calculateDistribution}
\alias{calculateDistribution}
\title{Calculates features of the distribution of a function's objective space}
\usage{
calculateDistribution(feat.object, control, ...)
}
\arguments{
\item{feat.object}{[\code{FeatureObject}]\cr
A feature object as created by createFeatureObject.}

\item{control}{[\code{list}]\cr
A list object that stores additional configuration parameters.
Here, the parameter distr.smoothing_bandwidth defines the smoothing
bandwidth, which should be used within the density estimation (cf.
\code{density}). The default is "SJ". In addition to the previous
parameter, distr.modemass_threshold defines the threshold that is used in
order to classify whether a minimum can be considered as a peak. Per
default this value is 0.01.
Also, the formula, which is used for the calculation of the skewness and
kurtosis can be defined using distr.skewness_type and distr.kurtosis_type.
The default of both methods is 3, which is also the default in R.}

\item{...}{[any]\cr
Further arguments for the computation within \code{density}.}
}
\value{
[\code{list(5)} of \code{numeric(1)}].\cr
  List of features.\cr
  The first two features return the skewness and kurtosis of the objective
  values. The next feature estimates the density of the objective
  values and analyzes them w.r.t. a certain threshold.\cr

  The final two features show the amount of (additional) function
  evaluations and running time (in seconds) that were needed for the
  computation of these features.
}
\description{
Computes features based on the objective space of a function.
}
\examples{
# (1) draw a random sample; here it consists of 2000 observations with
  # each one of them being 5-dimensional within -10 and 10:
  X = t(replicate(n = 2000, expr = runif(n = 5, min = -10, max = 10)))
  # (2) create a feature object
  feat.object = createFeatureObject(X = X, fun = function(x) sum(x^2))
  # (3) compute the y-distribution-features
  calculateDistribution(feat.object)
}

